* Schedule

** Schedule For Job

*** 2018/1
**** DONE <2018-01-02 周二> [100%]
	 CLOSED: [2018-01-07 周日 14:41]
	 - State "DONE"       from "TODO"       [2018-01-07 周日 14:41]
***** DONE BUG修正: Linux命令行环境下的SSL客户端 [上周五， 上周六， 本周二]
	  CLOSED: [2018-01-07 周日 14:39]
	  - State "DONE"       from "TODO"       [2018-01-07 周日 14:39]

***** DONE 上行流量监控方案设计 [本周三] [未完成]
	  CLOSED: [2018-01-07 周日 14:39]
	  - State "DONE"       from "TODO"       [2018-01-07 周日 14:39]

***** DONE 问题排查: 导入ldap大量用户时失败(数据库损坏以及导入中断) [本周四~本周五]
	  CLOSED: [2018-01-07 周日 14:41]
	  - State "DONE"       from "TODO"       [2018-01-07 周日 14:41]
**** DONE <2018-01-08 周一> [33%]
	 CLOSED: [2018-01-15 周一 09:11]
	 - State "DONE"       from "TODO"       [2018-01-15 周一 09:11]
***** DONE 杭州移动CAS统一认证问题 [周一]
	  CLOSED: [2018-01-09 周二 18:43]
	  - State "DONE"       from "TODO"       [2018-01-09 周二 18:43]
url过长导致浏览器截短了其url，致使认证失败
***** PROCESSING 38483: 上传附件失败 [周一 ~ 周二]
	  - State "PROCESSING" from "TODO"       [2018-01-15 周一 09:10]
问题定位失败
***** PROCESSING linux客户端迁移到CentOS7.0及Ubuntu [周三 ~ 周四]
	  - State "PROCESSING" from "TODO"       [2018-01-15 周一 09:11]
过程中被其他任务中断，未最终完成
**** DONE <2018-01-15 周一> [100%]
	 CLOSED: [2018-01-22 周一 15:26]
	 - State "DONE"       from "TODO"       [2018-01-22 周一 15:26]
***** DONE linux客户端迁移到CentOS7.0及Ubuntu
	  CLOSED: [2018-01-18 周四 09:07]
	  - State "DONE"       from "TODO"       [2018-01-18 周四 09:07]
***** DONE 38483: 上传附件失败
	  CLOSED: [2018-01-18 周四 09:07]
	  - State "DONE"       from "TODO"       [2018-01-18 周四 09:07]
中间设备问题
***** DONE 重新设计日志系统
	  CLOSED: [2018-01-22 周一 15:26]
	  - State "DONE"       from "TODO"       [2018-01-22 周一 15:26]
**** DONE <2018-01-22 周一> [100%]
	 CLOSED: [2018-01-29 周一 11:15]
	 - State "DONE"       from "TODO"       [2018-01-29 周一 11:15]
***** DONE 日志上下文信息自动填充 [周一 ~ 周三]
	  CLOSED: [2018-01-29 周一 11:06]
	  - State "DONE"       from "TODO"       [2018-01-29 周一 11:06]
完成了认证和web服务模块
***** DONE 日志系统设计 [周四 ~ 周五]
	  CLOSED: [2018-01-29 周一 11:14]
	  - State "DONE"       from "TODO"       [2018-01-29 周一 11:14]
  1. 加入过滤器
  2. 新增写文件和写数据库的接口
*** 2018/2
**** DONE <2018-01-29 周一> [100%]
	 CLOSED: [2018-02-26 周一 20:04]
	 - State "DONE"       from "TODO"       [2018-02-26 周一 20:04]
***** DONE 日志系统设计完善
	  CLOSED: [2018-02-02 周五 09:07]
	  - State "DONE"       from "TODO"       [2018-02-02 周五 09:07]
***** DONE shell分类及其追踪日志补全
	  CLOSED: [2018-02-03 周六 16:51]
	  - State "DONE"       from "TODO"       [2018-02-03 周六 16:51]
***** DONE 日志规范检索工具
	  CLOSED: [2018-02-26 周一 20:04]
	  - State "DONE"       from "TODO"       [2018-02-26 周一 20:04]
**** TODO <2018-02-26 周一> [0%]
***** TODO 日志设计详细设计文档
*** 2018/3
**** DONE <2018-03-05 周一> [60%]
	 CLOSED: [2018-03-12 周一 09:30]
	 - State "DONE"       from "TODO"       [2018-03-12 周一 09:30]
***** DONE 日志库与旧日志系统对接
	  CLOSED: [2018-03-12 周一 09:28]
	  - State "DONE"       from "TODO"       [2018-03-12 周一 09:28]
***** DONE 日志系统过滤条件实现
	  CLOSED: [2018-03-12 周一 09:28]
	  - State "DONE"       from "TODO"       [2018-03-12 周一 09:28]
***** DONE 日志服务后台命令支持
	  CLOSED: [2018-03-12 周一 09:28]
	  - State "DONE"       from "TODO"       [2018-03-12 周一 09:28]
**** DONE <2018-03-12 周一> [60%]
	 CLOSED: [2018-03-22 周四 14:48]
	 - State "DONE"       from "TODO"       [2018-03-22 周四 14:48]
***** DONE 日志命令行工具 [周一 ~ 至周二]
	  CLOSED: [2018-03-16 周五 15:45]
	  - State "DONE"       from "TODO"       [2018-03-16 周五 15:45]
***** DONE 日志联调 [周二 ~ 周四]
	  CLOSED: [2018-03-16 周五 15:45]
	  - State "DONE"       from "TODO"       [2018-03-16 周五 15:45]
***** DONE 日志模块静态扫描问题修改 [周五]
	  CLOSED: [2018-03-17 周六 09:30]
	  - State "DONE"       from "TODO"       [2018-03-17 周六 09:30]
**** DONE <2018-03-19 周一> [100%]
	 CLOSED: [2018-03-26 周一 10:24]
	 - State "DONE"       from "TODO"       [2018-03-26 周一 10:24]
***** DONE 日志上下文信息自动填充 [4/4]
	  CLOSED: [2018-03-23 周五 09:36]
	  - State "DONE"       from "TODO"       [2018-03-23 周五 09:36]
	  - [X] iptun [周一]
	  - [X] 虚拟IP模块 [周二]
	  - [X] timeqry [周二]
	  - [X] lib库 [7/7] [周三]
		+ [X] liblioctrl
		+ [X] libsvpn
		+ [X] librdb
		+ [X] libcrdb
		+ [X] mod_twf
		+ [X] mod_svpn_web
		+ [X] librtwf
**** DONE <2018-03-26 周一> [75%]
	 CLOSED: [2018-04-02 周一 09:06]
	 - State "DONE"       from "TODO"       [2018-04-02 周一 09:06]
***** DONE 日志模块valgrind扫描问题修改 [周一]
	  CLOSED: [2018-04-02 周一 09:05]
	  - State "DONE"       from "TODO"       [2018-04-02 周一 09:05]
***** DONE 日志模块静态扫描问题修改 [周一]
	  CLOSED: [2018-04-02 周一 09:05]
	  - State "DONE"       from "TODO"       [2018-04-02 周一 09:05]
***** DONE IP服务运行时数据dump支持
	  CLOSED: [2018-04-02 周一 09:05]
	  - State "DONE"       from "TODO"       [2018-04-02 周一 09:05]
完成dump机制实现及部分信息dump
*** 2018/4
**** DONE <2018-04-02 周一> [100%]
	 CLOSED: [2018-04-08 周日 08:58]
	 - State "DONE"       from "TODO"       [2018-04-08 周日 08:58]
***** DONE 集群问题合入
	  CLOSED: [2018-04-08 周日 08:57]
	  - State "DONE"       from "TODO"       [2018-04-08 周日 08:57]
***** DONE 认证问题合入
	  CLOSED: [2018-04-08 周日 08:57]
	  - State "DONE"       from "TODO"       [2018-04-08 周日 08:57]
**** DONE <2018-04-09 周一> [100%]
	 CLOSED: [2018-04-16 周一 08:55]
	 - State "DONE"       from "TODO"       [2018-04-16 周一 08:55]
***** DONE web资源问题合入
	  CLOSED: [2018-04-16 周一 08:54]
	  - State "DONE"       from "TODO"       [2018-04-16 周一 08:54]
***** DONE ip服务网上问题合入
	  CLOSED: [2018-04-16 周一 08:54]
	  - State "DONE"       from "TODO"       [2018-04-16 周一 08:54]
***** DONE 技术支持：用户路由在拆集群后在真实服务器还是不生效
	  CLOSED: [2018-04-16 周一 08:55]
	  - State "DONE"       from "TODO"       [2018-04-16 周一 08:55]
**** DONE <2018-04-16 周一>
	 CLOSED: [2018-04-23 周一 08:56]
	 - State "DONE"       from "TODO"       [2018-04-23 周一 08:56]
***** DONE 763web服务问题修改 [周一]
	  CLOSED: [2018-04-20 周五 17:33]
	  - State "DONE"       from "TODO"       [2018-04-20 周五 17:33]
***** DONE 763服务端问题跟进及修复 [周二 ~ 周四上午]
	  CLOSED: [2018-04-20 周五 17:33]
	  - State "DONE"       from "TODO"       [2018-04-20 周五 17:33]
***** DONE syslog日志对接改进 [周四下午 ~ 周五]
	  CLOSED: [2018-04-20 周五 17:33]
	  - State "DONE"       from "TODO"       [2018-04-20 周五 17:33]
***** DONE 代码静态扫描问题修复 [周六]
	  CLOSED: [2018-04-23 周一 08:56]
	  - State "DONE"       from "TODO"       [2018-04-23 周一 08:56]
**** DONE <2018-04-23 周一> [100%]
	 CLOSED: [2018-05-02 周三 08:53]
	 - State "DONE"       from "TODO"       [2018-05-02 周三 08:53]
***** DONE 代码静态扫描问题修复 [周一]
	  CLOSED: [2018-04-27 周五 14:09]
	  - State "DONE"       from "TODO"       [2018-04-27 周五 14:09]
***** DONE host头部攻击问题合入 [周二]
	  CLOSED: [2018-05-02 周三 08:53]
	  - State "DONE"       from "TODO"       [2018-05-02 周三 08:53]
***** DONE web资源相关配置在集群同步下的处理 [周三]
	  CLOSED: [2018-04-27 周五 14:12]
	  - State "DONE"       from "TODO"       [2018-04-27 周五 14:12]
***** DONE 用户审计日志偶发性缺失 [周四]
	  CLOSED: [2018-05-02 周三 08:53]
	  - State "DONE"       from "TODO"       [2018-05-02 周三 08:53]
*** 2018/5
**** DONE <2018-05-02 周三> [100%]
	 CLOSED: [2018-05-08 周二 08:56]
	 - State "DONE"       from "TODO"       [2018-05-08 周二 08:56]
***** DONE 大量私有用户登陆后访问L3资源异常 [周三 ~ 周四]
	  CLOSED: [2018-05-04 周五 08:54]
	  - State "DONE"       from "TODO"       [2018-05-04 周五 08:54]
***** DONE httpd堆栈问题查找 [周五]
	  CLOSED: [2018-05-07 周一 08:48]
	  - State "DONE"       from "TODO"       [2018-05-07 周一 08:48]
动态库替换所致
**** DONE <2018-05-07 周一> [100%]
	 CLOSED: [2018-05-14 周一 09:26]
	 - State "DONE"       from "TODO"       [2018-05-14 周一 09:26]
***** DONE CMMI相关文档熟悉
	  CLOSED: [2018-05-14 周一 09:24]
	  - State "DONE"       from "TODO"       [2018-05-14 周一 09:24]
***** DONE vssl升级校验不是校验的服务到期时间，而是软件到期时间 [周二]
	  CLOSED: [2018-05-09 周三 15:16]
	  - State "DONE"       from "TODO"       [2018-05-09 周三 15:16]
***** DONE webvpn cas定制交接 [周三]
	  CLOSED: [2018-05-14 周一 09:25]
	  - State "DONE"       from "TODO"       [2018-05-14 周一 09:25]
***** DONE 微信企业号认证定制交接 [周三]
	  CLOSED: [2018-05-14 周一 09:25]
	  - State "DONE"       from "TODO"       [2018-05-14 周一 09:25]
**** DONE <2018-05-14 周一> [100%]
	 CLOSED: [2018-05-24 周四 08:39]
	 - State "DONE"       from "TODO"       [2018-05-24 周四 08:39]
***** DONE 制定新员工成长计划(chengsi) [周一]
	  CLOSED: [2018-05-14 周一 20:34]
	  - State "DONE"       from "TODO"       [2018-05-14 周一 20:34]
***** DONE webvpn问题修复：Location对黑名单资源也会进行改写 [周一]
	  CLOSED: [2018-05-14 周一 20:33]
	  - State "DONE"       from "TODO"       [2018-05-14 周一 20:33]
**** DONE <2018-05-21 周一> [100%]
	 CLOSED: [2018-05-28 周一 09:29]
	 - State "DONE"       from "TODO"       [2018-05-28 周一 09:29]
***** DONE 集群下https和http都非默认端口时ios客户端下载安装aWork失败
	  CLOSED: [2018-05-24 周四 08:46]
	  - State "DONE"       from "TODO"       [2018-05-24 周四 08:46]
查出来是httpd堆栈，assert条件有误
***** DONE snmp堆栈
	  CLOSED: [2018-05-24 周四 08:46]
	  - State "DONE"       from "TODO"       [2018-05-24 周四 08:46]
***** DONE 网络切换后，免密失败自动注销
	  CLOSED: [2018-05-24 周四 08:46]
	  - State "DONE"       from "TODO"       [2018-05-24 周四 08:46]
***** DONE 集群下控制台删除emm授权后，awork触发免密后不会自动注销
	  CLOSED: [2018-05-24 周四 08:47]
	  - State "DONE"       from "TODO"       [2018-05-24 周四 08:47]
***** DONE http堆栈
	  CLOSED: [2018-05-24 周四 08:47]
	  - State "DONE"       from "TODO"       [2018-05-24 周四 08:47]
***** DONE 审计日志经常无法输出（Unix本地套接字发送异常） [周四 ~ 周五上午]
	  CLOSED: [2018-05-25 周五 10:45]
	  - State "DONE"       from "TODO"       [2018-05-25 周五 10:45]
**** DONE <2018-05-28 周一> [100%]
	 CLOSED: [2018-06-13 周三 09:19]
	 - State "DONE"       from "TODO"       [2018-06-13 周三 09:19]
***** DONE 高校web资源问题梳理及解决 [3/3]
	  CLOSED: [2018-06-13 周三 09:19]
	  - State "DONE"       from "TODO"       [2018-06-13 周三 09:19]
  1. [X] http模式下Set-Cookie的secure字段问题 [周一 ~ 周二]
  2. [X] 发送 Client-Hello 时包含国家商密算法套件导致与很多国外站点不能建立SSL连接 [周二]
  3. [X] Ajax请求跨域不带Cookie问题
*** 2018/6
**** DONE <2018-06-13 周三> [100%]
	 CLOSED: [2018-06-25 周一 09:22]
	 - State "DONE"       from "TODO"       [2018-06-25 周一 09:22]
***** DONE 技术支持
	  CLOSED: [2018-06-25 周一 09:18]
	  - State "DONE"       from "TODO"       [2018-06-25 周一 09:18]
***** DONE webvpn技术支持
	  CLOSED: [2018-06-25 周一 09:18]
	  - State "DONE"       from "TODO"       [2018-06-25 周一 09:18]
**** DONE <2018-06-18 周一> [100%]
	 CLOSED: [2018-06-25 周一 09:22]
	 - State "DONE"       from "TODO"       [2018-06-25 周一 09:22]
***** DONE 企业微信设计 [未收尾]
	  CLOSED: [2018-06-25 周一 09:22]
	  - State "DONE"       from "TODO"       [2018-06-25 周一 09:22]

**** DONE <2018-06-25 周一> [100%]
	 CLOSED: [2018-07-02 周一 08:43]
	 - State "DONE"       from "TODO"       [2018-07-02 周一 08:43]
***** DONE wproxy作为web反向代理的可行性分析 [周一 ~ 周三]
	  CLOSED: [2018-06-28 周四 09:40]
	  - State "DONE"       from "TODO"       [2018-06-28 周四 09:40]
***** DONE node-proxy设计 [周四]
	  CLOSED: [2018-07-02 周一 08:43]
	  - State "DONE"       from "TODO"       [2018-07-02 周一 08:43]
***** DONE node-proxy编码，静态改写规则及动态改写规则实现 [周五 ~ 周六]
	  CLOSED: [2018-07-02 周一 08:43]
	  - State "DONE"       from "TODO"       [2018-07-02 周一 08:43]
*** 2018/7
**** DONE <2018-07-02 周一> [80%]
	 CLOSED: [2018-07-16 周一 09:41]
	 - State "DONE"       from "TODO"       [2018-07-16 周一 09:41]
***** DONE node-proxy方案出包（跑性能要用到）
	  CLOSED: [2018-07-07 周六 09:19]
	  - State "DONE"       from "TODO"       [2018-07-07 周六 09:19]
***** DONE Http响应头部改写，如：Location、Refresh、Set-Cookie等
	  CLOSED: [2018-07-07 周六 09:19]
	  - State "DONE"       from "TODO"       [2018-07-07 周六 09:19]
***** DONE web资源技术支持方案迁移到js（去除mod_proxy）
	  CLOSED: [2018-07-07 周六 09:19]
	  - State "DONE"       from "TODO"       [2018-07-07 周六 09:19]
***** DONE 研究如何方便的在js中做webvpn的技术支持
	  CLOSED: [2018-07-16 周一 09:39]
	  - State "DONE"       from "TODO"       [2018-07-16 周一 09:39]
**** DONE <2018-07-09 周一> [50%]
	 CLOSED: [2018-07-16 周一 09:42]
	 - State "DONE"       from "TODO"       [2018-07-16 周一 09:42]
***** DONE wproxy内存占用分析 [周一 ~ 周四]
	  CLOSED: [2018-07-16 周一 09:41]
	  - State "DONE"       from "TODO"       [2018-07-16 周一 09:41]
iconv-lite中对Buffer使用不当，在一个函数中返回了一大段内存的某部分的引用
***** PROCESSING node proxy概要设计【未完成】 [周五]
	  - State "PROCESSING" from "TODO"       [2018-07-16 周一 09:42]
**** TODO <2018-07-16 周一> [0%]
***** TODO node proxy概要设计
***** TODO node proxy预研报告书
**** TODO web资源黑白名单功能迁移
**** TODO node proxy方案性能分析及改进
*** TODO 日志改进 [2/5]
	+ [X] 日志系统改进
	  + [X] 过滤条件实现 (liuy)
	  + [X] 后台命令支持(logtool实现及logd对接) (liuy)
	  + [X] 文本日志 (pang)
	  + [X] 数据库日志 (pang)
	+ [X] 各模块日志上下文构建
	  + [X] apache扩展模块
	  + [X] lib库
	  + [X] iptun
	  + [X] proxy
	  + [X] timequery
	  + [X] 虚拟IP
	+ [ ] 各模块Warning级别以上日志规范化
	+ [ ] 多余日志去除/关键路径日志补全
	+ [ ] shell脚本日志规范化

** Professional Skills

*** Lua

*** Nginx

*** Game Development

**** AI

** Summary

*** Be Skilled In

	* 擅长基于Unix平台的应用开发
	* 了解TCP/IP协议模型，及其工作原理
	* 熟悉中心拓扑结构的MMOG服务器架构

*** Work Exp

**** OG

***** 服务器架构

***** 技能

	  用状态模式来管理技能的释放流程。比如，我们可以抽象这么几种状态：正常状态、
	  蓄气状态、瞬发攻击状态、引导攻击状态。正常状态可以迁移到蓄气和两个攻击状
	  态；进入蓄气状态表示玩家释放蓄气技能，蓄气成功的话进入瞬发攻击状态；瞬发
	  攻击状态最常用，玩家大部分技能释放时都是进入该状态，对于非移动施法技能该
	  状态必须否决玩家的行走行为；引导攻击状态对应的玩家的读秒技能。

***** AI

****** 我们的解决方案

	   我们用事件/条件/行为规则来模拟怪物的一类条件发射，我们再将这样的规则用一
	   条决策封装起来。怪物有一组决策数组，在有事件发生的时候，通过轮训这个决策
	   数组就能模拟简单的怪物智能了。比如我们可以给“惹事怪”编辑这样一条决策：
	   当有玩家进入我的视野时，直接攻击；可以给“和平怪”编辑决策：当有玩家打我
	   时，逃跑。

***** 玩法

***** 微端模式支持

	  微端模式实际就是将本地文件放置网络读取。我们独立出一个 I/O 接口，游戏逻辑
	  中的所有 I/O 操作都通过该接口完成。该 I/O 接口支持异步模式，大端模式下，
	  调用本地 I/O 方法；微端模式下，调用网络 I/O 方法。

	  另外需要实现一个微端长连接服务器来管理所有的微端玩家。微端服务器的主要功能
	  有：推送资源地址；通过分析微端玩家的下载行为智能推送下载列表。

* Notes

** GAE(Google App Engine)

** Apache

*** Apache的配置文件http.conf参数含义详解

**** 基本配置

	 #+begin_src sh
       ServerRoot "/mnt/software/apache2" #你的apache软件安装的位置。其它指定的目录如果没有指定绝对路径，则目录是相对于该目录。
       PidFile logs/httpd.pid #第一个httpd进程(所有其他进程的父进程)的进程号文件位置。
       Listen 80 #服务器监听的端口号。
       ServerName www.clusting.com:80 #主站点名称（网站的主机名）。
       ServerAdmin admin@clusting.com #管理员的邮件地址。
       DocumentRoot "/mnt/web/clusting" #主站点的网页存储位置。
	 #+end_src

	 目录访问控制配置

	 #+begin_src html
       <Directory "D:/xampp/cgi-bin">
         Options FollowSymLinks
         AllowOverride None
         Order allow,deny
         Allow from all
       </Directory>
	 #+end_src

	 在上面这段目录属性配置中，主要有下面的选项：

	 1. Options：配置在特定目录使用哪些特性，常用的值和基本含义如下：

	    1. ExecCGI: 在该目录下允许执行CGI脚本。
		2. FollowSymLinks: 在该目录下允许文件系统使用符号连接。
		3. Indexes: 当用户访问该目录时，如果用户找不到DirectoryIndex指定的主页文件(例如index.html),则返回该目录下的文件列表给用户。
		4. SymLinksIfOwnerMatch: 当使用符号连接时，只有当符号连接的文件拥有者与实际文件的拥有者相同时才可以访问。

	    其它可用值和含义请参阅：http://www.clusting.com/Apache/ApacheManual/mod/core.html#options

	 2. AllowOverride：允许存在于.htaccess文件中的指令类型(.htaccess文件名是可以改变的，其文件名由AccessFileName指令决定)：

	    1. None: 当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件（可以减小服务器开销）。
		2. All: 在.htaccess文件中可以使用所有的指令。

	    其他的可用值及含义(如：Options FileInfo AuthConfig Limit等)，请参看： http://www.clusting.com/Apache/ApacheManual/mod/core.html#AllowOverride

	 3. Order：控制在访问时Allow和Deny两个访问规则哪个优先：

		1. Allow：允许访问的主机列表(可用域名或子网，例如：Allow from 192.168.0.0/16)。
		2. Deny：拒绝访问的主机列表。

	    更详细的用法可参看：http://www.clusting.com/Apache/ApacheManual/mod/mod_access.html#order

	 #+begin_src sh
       DirectoryIndex index.html index.htm index.PHP #主页文件的设置（本例将主页文件设置为：index.html,index.htm和index.php）
	 #+end_src

**** 服务器的优化 (MPM: Multi-Processing Modules)

	 apache2主要的优势就是对多处理器的支持更好，在编译时同过使用–with-mpm选项来决定apache2的工作模式。如果知道当前的apache2使用什么工作机制，可以通过httpd -l命令列出apache的所有模块，就可以知道其工作方式：

	 * prefork：如果httpd -l列出prefork.c，则需要对下面的段进行配置：
	   1. StartServers 5 #启动apache时启动的httpd进程个数。
	   2. MinSpareServers 5 #服务器保持的最小空闲进程数。
	   3. MaxSpareServers 10 #服务器保持的最大空闲进程数。
	   4. MaxClients 150 #最大并发连接数。
	   5. MaxRequestsPerChild 1000 #每个子进程被请求服务多少次后被kill掉。0表示不限制，推荐设置为1000。
	   在该工作模式下，服务器启动后起动5个httpd进程(加父进程共6个，通过ps -ax|grep httpd命令可以看到)。当有用户连接时，apache会使用一个空闲进程为该连接服务，同时父进程会fork一个子进程。直到内存中的空闲进程达到 MaxSpareServers。该模式是为了兼容一些旧版本的程序。我缺省编译时的选项。

	 * worker：如果httpd -l列出worker.c，则需要对下面的段进行配置：
	   1. StartServers 2 #启动apache时启动的httpd进程个数。
	   2. MaxClients 150 #最大并发连接数。
	   3. MinSpareThreads 25 #服务器保持的最小空闲线程数。
	   4. MaxSpareThreads 75 #服务器保持的最大空闲线程数。
	   5. ThreadsPerChild 25 #每个子进程的产生的线程数。
	   6. MaxRequestsPerChild 0 #每个子进程被请求服务多少次后被kill掉。0表示不限制，推荐设置为1000。
	   该模式是由线程来监听客户的连接。当有新客户连接时，由其中的一个空闲线程接受连接。服务器在启动时启动两个进程，每个进程产生的线程数是固定的 (ThreadsPerChild决定)，因此启动时有50个线程。当50个线程不够用时，服务器自动fork一个进程，再产生25个线程。

	 * perchild：如果httpd -l列出perchild.c，则需要对下面的段进行配置：
	   1. NumServers 5 #服务器启动时启动的子进程数
	   2. StartThreads 5 #每个子进程启动时启动的线程数
	   3. MinSpareThreads 5 #内存中的最小空闲线程数
	   4. MaxSpareThreads 10 #最大空闲线程数
	   5. MaxThreadsPerChild 2000 #每个线程最多被请求多少次后退出。0不受限制。
	   6. MaxRequestsPerChild 10000 #每个子进程服务多少次后被重新fork。0表示不受限制。
	   该模式下，子进程的数量是固定的，线程数不受限制。当客户端连接到服务器时，又空闲的线程提供服务。 如果空闲线程数不够，子进程自动产生线程来为新的连接服务。该模式用于多站点服务器。
**** HTTP返回头信息配置
	 * ServerTokens Prod #该参数设置http头部返回的apache版本信息，可用的值和含义如下：
	   1. Prod：仅软件名称，例如：apache
	   2. Major：包括主版本号，例如：apache/2
	   3. Minor：包括次版本号，例如：apache/2.0
	   4. Min：仅apache的完整版本号，例如：apache/2.0.54
	   5. OS：包括操作系统类型，例如：apache/2.0.54（Unix）
	   6. Full：包括apache支持的模块及模块版本号，例如：Apache/2.0.54 (Unix) mod_ssl/2.0.54 OpenSSL/0.9.7g
	 * ServerSignature Off #在页面产生错误时是否出现服务器版本信息。推荐设置为Off
**** 持久性连接设置
	 * KeepAlive On #开启持久性连接功能。即当客户端连接到服务器，下载完数据后仍然保持连接状态。
	 * MaxKeepAliveRequests 100 #一个连接服务的最多请求次数。
	 * KeepAliveTimeout 30 #持续连接多长时间，该连接没有再请求数据，则断开该连接。缺省为15秒。
**** 别名设置
	 对于不在DocumentRoot指定的目录内的页面，既可以使用符号连接，也可以使用别名。别名的设置如下：
	 #+begin_src html
       Alias /download/ "/var/www/download/" #访问时可以输入:http://www.custing.com/download/
       #对该目录进行访问控制设置
       Options Indexes MultiViews
       AllowOverride AuthConfig
       Order allow,deny
       Allow from all
	 #+end_src
**** CGI设置
	 #+begin_src html
       scrīptAlias /cgi-bin/ "/mnt/software/apache2/cgi-bin/" # 访问时可以：http://www.clusting.com/cgi-bin/ 。但是该目录下的CGI脚本文件要加可执行权限！

       #设置目录属性
       AllowOverride None
       Options None
       Order allow,deny
       Allow from all
	 #+end_src
**** 日志的设置
	 * 错误日志的设置
	   #+begin_src sh
         ErrorLog logs/error_log #日志的保存位置
         LogLevel warn #日志的级别
	   #+end_src
	   显示的格式如下
	   #+begin_src html
         [Mon Oct 10 15:54:29 2005] [error] [client 192.168.10.22] access to /download/ failed, reason: user admin not allowed access
	   #+end_src
	 * 日志格式设置
	   日志的缺省格式有如下几种：
	   #+begin_src html
         LogFormat "%h %l %u %t "%r" %>s %b "%{Referer}i" "%{User-Agent}i"" combined
         LogFormat "%h %l %u %t "%r" %>s %b" common #common为日志格式名称
         LogFormat "%{Referer}i -> %U" referer
         LogFormat "%{User-agent}i" agent
         CustomLog logs/access_log common
	   #+end_src
	   格式中的各个参数如下：
	   #+begin_src html
         %h –客户端的ip地址或主机名
         %l –The 这是由客户端 identd 判断的RFC 1413身份，输出中的符号 "-" 表示此处信息无效。
         %u –由HTTP认证系统得到的访问该网页的客户名。有认证时才有效，输出中的符号 "-" 表示此处信息无效。
         %t –服务器完成对请求的处理时的时间。
         "%r" –引号中是客户发出的包含了许多有用信息的请求内容。
         %>s –这个是服务器返回给客户端的状态码。
         %b –最后这项是返回给客户端的不包括响应头的字节数。
         "%{Referer}i" –此项指明了该请求是从被哪个网页提交过来的。
         "%{User-Agent}i" –此项是客户浏览器提供的浏览器识别信息。
	   #+end_src
	   下面是一段访问日志的实例：
	   #+begin_src html
         192.168.10.22 – bearzhang [10/Oct/2005:16:53:06 +0800] "GET /download/ HTTP/1.1" 200 1228
         192.168.10.22 – - [10/Oct/2005:16:53:06 +0800] "GET /icons/blank.gif HTTP/1.1" 304 -
         192.168.10.22 – - [10/Oct/2005:16:53:06 +0800] "GET /icons/back.gif HTTP/1.1" 304 -
	   #+end_src
**** 虚拟主机的配置
	 * 基于IP地址的虚拟主机配置
	   #+begin_src html
         Listen 80

         DocumentRoot /www/example1
         ServerName www.example1.com

         DocumentRoot /www/example2
         ServerName www.example2.org
	   #+end_src
	 * 基于IP和多端口的虚拟主机配置
	   #+begin_src html
         Listen 172.20.30.40:80
         Listen 172.20.30.40:8080
         Listen 172.20.30.50:80
         Listen 172.20.30.50:8080

         DocumentRoot /www/example1-80
         ServerName www.example1.com

         DocumentRoot /www/example1-8080
         ServerName www.example1.com

         DocumentRoot /www/example2-80
         ServerName www.example1.org

         DocumentRoot /www/example2-8080
         ServerName www.example2.org
	   #+end_src
	 * 单个IP地址的服务器上基于域名的虚拟主机配置
	   #+begin_src html
         # Ensure that Apache listens on port 80
         Listen 80

         # Listen for virtual host requests on all IP addresses
         NameVirtualHost *:80

         DocumentRoot /www/example1
         ServerName www.example1.com
         ServerAlias example1.com. *.example1.com
         # Other directives here

         DocumentRoot /www/example2
         ServerName www.example2.org
         # Other directives here
	   #+end_src
	 * 在多个IP地址的服务器上配置基于域名的虚拟主机：
	   #+begin_src html
         Listen 80

         # This is the "main" server running on 172.20.30.40
         ServerName server.domain.com
         DocumentRoot /www/mainserver

         # This is the other address
         NameVirtualHost 172.20.30.50

         DocumentRoot /www/example1
         ServerName www.example1.com
         # Other directives here …

         DocumentRoot /www/example2
         ServerName www.example2.org
         # Other directives here …
	   #+end_src
	 * 在不同的端口上运行不同的站点(基于多端口的服务器上配置基于域名的虚拟主机)
	   #+begin_src html
         Listen 80
         Listen 8080

         NameVirtualHost 172.20.30.40:80
         NameVirtualHost 172.20.30.40:8080

         ServerName www.example1.com
         DocumentRoot /www/domain-80

         ServerName www.example1.com
         DocumentRoot /www/domain-8080

         ServerName www.example2.org
         DocumentRoot /www/otherdomain-80

         ServerName www.example2.org
         DocumentRoot /www/otherdomain-8080
	   #+end_src
	 * 基于域名和基于IP的混合虚拟主机的配置
	   #+begin_src html
         Listen 80

         NameVirtualHost 172.20.30.40

         DocumentRoot /www/example1
         ServerName www.example1.com

         DocumentRoot /www/example2
         ServerName www.example2.org

         DocumentRoot /www/example3
         ServerName www.example3.net
	   #+end_src
** Git																	:git:
*** Git分支
**** 分支查看
	 * 查看本地分支
	   #+BEGIN_SRC sh
         $ git branch
         * master
	   #+END_SRC
	 * 查看远程分支
	   #+BEGIN_SRC sh
         $ git branch -r
           kbengine/master
           origin/HEAD -> origin/master
           origin/master
	   #+END_SRC
	 * 查看所有分支
	   #+BEGIN_SRC sh
         $ git branch -a
         * master
           remotes/kbengine/master
           remotes/origin/HEAD -> origin/master
           remotes/origin/master
	   #+END_SRC
	 * 创建分支
	   #+BEGIN_SRC sh
         $ git branch <分支名>
	   #+END_SRC
	 * 删除本地分支
	   #+BEGIN_SRC sh
         $ git branch -d <分支名>
	   #+END_SRC
	 * 切换分支
	   #+BEGIN_SRC sh
         git checkout <分支名>
	   #+END_SRC
**** 分支合并
** Tools
*** VMware 虚拟机启动脚本
	#+begin_src sh
      start /min vmware.exe -x "F:\Virtual Machine\CentOS\CentOS.vmx"
      ping -n 10 127.0.0.1 >nul 2>nul
      taskkill /im vmware.exe /f
      exit
	#+end_src
* Articles
** MMOG
   * [[https://developer.valvesoftware.com/wiki/Main_Page][Source Engine]]

	 1. [ ] [[https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization][网络延时补偿]]
	 2. [ ] [[https://developer.valvesoftware.com/wiki/Lag_compensation][Lag compensation]]
	 3. [ ] [[https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking][Source Multiplayer Networking]]
