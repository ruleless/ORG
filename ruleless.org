* 逃离心里舒适区
* Schedule

** Schedule For Job

*** 2017/1
**** DONE <2017-01-03 周二> [50%]
	 CLOSED: [2017-01-09 周一 09:55]
	 - State "DONE"       from "TODO"       [2017-01-09 周一 09:55]
***** DONE 心法UI换肤工作收尾
	  CLOSED: [2017-01-03 周二 17:50]
	  - State "DONE"       from "TODO"       [2017-01-03 周二 17:50]
***** TODO 龙魂养成
**** TODO <2017-01-09 周一> [0%]
***** TODO 龙魂养成
***** TODO 伏羲玄天盘
**** TODO 新增标记，若将目标参与计算，则目标脱离攻击范围后会计算伤害，不会附加buff
**** TODO 结婚巡游bug修复
**** TODO 龙盘功能扩展 [4/8]
	 + [X] 伏羲玄天盘功能开发
	 + [X] 元素龙魂养成功能开发
	 + [X] 阴阳养成功能开发
	 + [X] 阴阳移位功能开发
	 + [ ] 元素龙魂养成界面开发
	 + [ ] 伏羲玄天盘界面开发
	 + [ ] 阴阳养成界面开发
	 + [ ] 阴阳移位界面开发
**** TODO 结婚巡游bug修复：在非巡游时间去发起巡游，虽然没有发起成功，但是道具“巡游令”扣除了，导致玩家完成不了相应的结婚成就
**** TODO 微端优化计划 [0%]
***** TODO [#A] 空闲下载列表需依据主线任务作排序(如，在新手村的玩家如果有剩余带宽需下载下一张地图的资源)
***** TODO [#B] 可识别美术定义的场景资源优先级，并适当放弃低优先级物件的请求
***** TODO zip散文件是否可合入mpk包？
***** TODO 将登录器资源更新逻辑融入微端代理进程，为预更新或剩余资源下载铺路
***** TODO 内测/压测资源合并
*** 2017/3
**** DONE <2017-02-27 周一> [100%]
	 CLOSED: [2017-03-06 周一 11:15]
	 - State "DONE"       from "TODO"       [2017-03-06 周一 11:15]
***** DONE 整合Log到proxyd应用中
	  CLOSED: [2017-03-02 周四 08:42]
	  - State "DONE"       from "TODO"       [2017-03-02 周四 08:42]
***** DONE 为proxyd增加配置功能
	  CLOSED: [2017-03-02 周四 08:42]
	  - State "DONE"       from "TODO"       [2017-03-02 周四 08:42]
***** DONE BugReport支持
	  CLOSED: [2017-03-03 周五 08:40]
	  - State "DONE"       from "TODO"       [2017-03-03 周五 08:40]
***** DONE proxyd命令行参数解析
	  CLOSED: [2017-03-03 周五 08:39]
	  - State "DONE"       from "TODO"       [2017-03-03 周五 08:39]
***** DONE 单实例运行
	  CLOSED: [2017-03-03 周五 08:39]
	  - State "DONE"       from "TODO"       [2017-03-03 周五 08:39]
***** DONE 熟悉proxyd
	  CLOSED: [2017-03-06 周一 11:14]
	  - State "DONE"       from "TODO"       [2017-03-06 周一 11:14]
**** DONE <2017-03-06 周一> [15%]
	 CLOSED: [2017-03-14 周二 14:00]
	 - State "DONE"       from "TODO"       [2017-03-14 周二 14:00]
***** DONE BUG: 守护进程模式下proxyd不能正常启动
	  CLOSED: [2017-03-08 周三 08:42]
	  - State "DONE"       from "TODO"       [2017-03-08 周三 08:42]
***** DONE proxyutil(反向代理工具)命令添加。需支持的命令至少包括：
	  CLOSED: [2017-03-10 周五 12:47]
	  - State "DONE"       from "TODO"       [2017-03-10 周五 12:47]
	  1. [X] 日志级别控制
	  2. [X] 根据vpn地址查询和控制反向连接信息
**** DONE <2017-03-14 周二> [100%]
	 CLOSED: [2017-03-20 周一 09:26]
	 - State "DONE"       from "TODO"       [2017-03-20 周一 09:26]
***** DONE MDM IOS APP安装命令推送
	  CLOSED: [2017-03-20 周一 09:26]
	  - State "DONE"       from "TODO"       [2017-03-20 周一 09:26]
***** DONE MDM IOS APP卸载命令推送
	  CLOSED: [2017-03-20 周一 09:26]
	  - State "DONE"       from "TODO"       [2017-03-20 周一 09:26]
**** DONE <2017-03-23 周四> [100%]
	 CLOSED: [2017-03-28 周二 17:08]
	 - State "DONE"       from "TODO"       [2017-03-28 周二 17:08]
***** DONE MDM相关BUG查找及修复 [5/6]
	  CLOSED: [2017-03-28 周二 17:08]
	  - State "DONE"       from "TODO"       [2017-03-28 周二 17:08]
	  + [X] 【aWork】aWork上注册信息与实际不相符 [rejected]
	  + [X] 【ios-awork】最近连接服务器信息显示错误---songnj20170321 [fixed]
	  + [X]  mdm注册替换VPN，无法注册上。MDM删除设备，手机上MDM描述文件未删除 [fixed]
	  + [X] 【ios-awork】策略下发不成功--非必现 [rejected]
	  + [X] 【ios-awork】禁用icloud服务不生效 [rejected]
	  + [ ]  在应用商店安装应用时第一次提示无法连接，第二次正常(必现)
***** DONE ios aWORK下载支持 [por/ios.csp页面下发；编写shell脚本写sqlite数据库并拷贝安装包到应用商店目录]
	  CLOSED: [2017-03-24 周五 08:39]
	  - State "DONE"       from "TODO"       [2017-03-24 周五 08:39]
**** DONE <2017-03-29 周三> [100%]
	 CLOSED: [2017-04-05 周三 09:03]
	 - State "DONE"       from "TODO"       [2017-04-05 周三 09:03]
***** DONE MDM相关BUG查找及修复 [1/1]
	  CLOSED: [2017-04-05 周三 09:03]
	  - State "DONE"       from "TODO"       [2017-04-05 周三 09:03]
	  + [X] 非443端口状态下，应用商店如果配置了端口信息会导致应用商店不可访问
**** TODO tsmanager代码阅读[必须产出文档]
**** TODO proxyd的服务脚本
**** TODO node.js脚本安装为服务
**** TODO node.js脚本日志支持
**** TODO node.js脚本异常处理(try catch)
**** TODO node.js脚本定时器C进程的清理 否则会产生很多无效进程
**** TODO tcp服务针对反向代理程序的session支持(通过算法保证session安全)
**** TODO mdmutil 命令添加：对接反向代理的node.js程序，用于取token
**** TODO 反向代理的node.js程序的日志支持
**** TODO 反向代理内存泄漏查找
**** TODO 反向代理：需要在安装脚本中处理防火墙关闭端口的情况

*** 2017/4
**** DONE <2017-04-05 周三> [0%]
	 CLOSED: [2017-04-17 周一 08:38]
	 - State "DONE"       from "TODO"       [2017-04-17 周一 08:38]
***** TODO Web服务根据通配符规则重写内部链接 [1/1]
	  + [X] 通配符匹配
**** DONE <2017-04-10 周一> [100%]
	 CLOSED: [2017-04-17 周一 08:39]
	 - State "DONE"       from "TODO"       [2017-04-17 周一 08:39]
***** DONE Web资源改进实现设计
	  CLOSED: [2017-04-17 周一 08:39]
	  - State "DONE"       from "TODO"       [2017-04-17 周一 08:39]
***** DONE Web资源改进：实现基于正则表达式的页面链接替换
	  CLOSED: [2017-04-17 周一 08:39]
	  - State "DONE"       from "TODO"       [2017-04-17 周一 08:39]
**** DONE <2017-04-17 周一> [100%]
	 CLOSED: [2017-04-24 周一 14:36]
	 - State "DONE"       from "TODO"       [2017-04-24 周一 14:36]
***** DONE Web资源改进：点击替换后的链接能正常通过VPN访问内网资源
	  CLOSED: [2017-04-24 周一 14:36]
	  - State "DONE"       from "TODO"       [2017-04-24 周一 14:36]
***** DONE Web资源改进：点击替换后的链接可以在VPN鉴权通过
	  CLOSED: [2017-04-24 周一 14:36]
	  - State "DONE"       from "TODO"       [2017-04-24 周一 14:36]
**** DONE <2017-04-24 周一> [100%]
	 CLOSED: [2017-05-02 周二 09:24]
	 - State "DONE"       from "TODO"       [2017-05-02 周二 09:24]
***** DONE web资源改进BUG跟进
	  CLOSED: [2017-05-02 周二 09:24]
	  - State "DONE"       from "TODO"       [2017-05-02 周二 09:24]
***** DONE web资源改进代码评审问题修改
	  CLOSED: [2017-05-02 周二 09:24]
	  - State "DONE"       from "TODO"       [2017-05-02 周二 09:24]
***** DONE web资源改进cookie管理
	  CLOSED: [2017-05-02 周二 09:25]
	  - State "DONE"       from "TODO"       [2017-05-02 周二 09:25]
*** 2017/5
**** DONE <2017-05-02 周二> [62%]
	 CLOSED: [2017-05-08 周一 08:55]
	 - State "DONE"       from "TODO"       [2017-05-08 周一 08:55]
***** DONE Web资源改进代码走读问题修改
	  CLOSED: [2017-05-04 周四 14:04]
	  - State "DONE"       from "TODO"       [2017-05-04 周四 14:04]
***** DONE Web资源改进设计图修正
	  CLOSED: [2017-05-04 周四 16:38]
	  - State "DONE"       from "TODO"       [2017-05-04 周四 16:38]
***** DONE 编写Web服务模块答辩文档
	  CLOSED: [2017-05-08 周一 08:53]
	  - State "DONE"       from "TODO"       [2017-05-08 周一 08:53]
***** DONE 替换 document.domain='tt.com' 形式的字符串 [在mod_regex里面完成此项工作]
	  CLOSED: [2017-05-08 周一 08:54]
	  - State "DONE"       from "TODO"       [2017-05-08 周一 08:54]
***** DONE regex模块重写
	  CLOSED: [2017-05-08 周一 08:54]
	  - State "DONE"       from "TODO"       [2017-05-08 周一 08:54]
**** DONE <2017-05-08 周一> [100%]
	 CLOSED: [2017-05-15 周一 10:02]
	 - State "DONE"       from "TODO"       [2017-05-15 周一 10:02]
***** DONE Web资源改进BUG修复
	  CLOSED: [2017-05-15 周一 09:20]
	  - State "DONE"       from "TODO"       [2017-05-15 周一 09:20]
***** DONE Web资源站点分析
	  CLOSED: [2017-05-15 周一 09:20]
	  - State "DONE"       from "TODO"       [2017-05-15 周一 09:20]
***** DONE Web资源改进代码扫描问题修改
	  CLOSED: [2017-05-15 周一 09:57]
	  - State "DONE"       from "TODO"       [2017-05-15 周一 09:57]
***** DONE text/plain 的页面需要替换
	  CLOSED: [2017-05-15 周一 10:02]
	  - State "DONE"       from "TODO"       [2017-05-15 周一 10:02]
***** DONE Web资源改进定制包升级脚本限制必须从M7.5Beta3升级
	  CLOSED: [2017-05-08 周一 17:32]
	  - State "DONE"       from "TODO"       [2017-05-08 周一 17:32]
**** DONE <2017-05-15 周一> [100%]
	 CLOSED: [2017-05-22 周一 10:18]
	 - State "DONE"       from "TODO"       [2017-05-22 周一 10:18]
***** DONE Web资源改进：新老形式的Cookie混用时会影响登录
	  CLOSED: [2017-05-15 周一 15:15]
	  - State "DONE"       from "TODO"       [2017-05-15 周一 15:15]
***** DONE Web资源改进合入M7.6
	  CLOSED: [2017-05-16 周二 19:40]
	  - State "DONE"       from "TODO"       [2017-05-16 周二 19:40]
***** DONE 微信企业号巴奴技术支持
	  CLOSED: [2017-05-22 周一 10:06]
	  - State "DONE"       from "TODO"       [2017-05-22 周一 10:06]

结论：
我们目前仅支持主页型应用，在主页型应用模式下，
通过Easylink资源接入的系统不需要(也不允许)再调用微信的身份验证接口，
而只能使用VPN通过URL参数(可以自己配，默认配的是login=user_id)传递过来的身份信息。

***** DONE 微信企业号航天科技神软移动办公技术支持
	  CLOSED: [2017-05-22 周一 10:06]
	  - State "DONE"       from "TODO"       [2017-05-22 周一 10:06]

结论：
前线实施人员不熟悉实施步骤，在技术支持过程中遇到的大部分问题都属于实施人员对实施步骤不熟悉所致。
这些问题包括：

  1. 手机微信端打开企业号应用显示空白。因为未申请授权证书
  2. VPN未配置企业号corpid和secret
  3. 使用Web资源而非Easylink资源导致在打开微信企业号应用之后，很多页面访问不正常

在跟渠道方实施人员沟通的过程中，发现他没有实施文档，而在定制包中实际是有文档打包在里面的。

**** DONE <2017-05-22 周一> [60%]
	 CLOSED: [2017-05-27 周六 17:52]
	 - State "DONE"       from "TODO"       [2017-05-27 周六 17:52]
***** DONE Web资源支持黑名单
	  CLOSED: [2017-05-27 周六 17:52]
	  - State "DONE"       from "TODO"       [2017-05-27 周六 17:52]
***** DONE 转正
	  CLOSED: [2017-05-27 周六 17:52]
	  - State "DONE"       from "TODO"       [2017-05-27 周六 17:52]
***** DONE 深圳证券所相关的定制：集群下真实服务器不启用用户配置的路由
	  CLOSED: [2017-05-25 周四 16:34]
	  - State "DONE"       from "TODO"       [2017-05-25 周四 16:34]
**** TODO Web资源性能分析
**** TODO checklist阅读
**** TODO 微信企业号认证定制包合入M7.6
**** TODO 无Content-Type 的页面需要替换
**** TODO 替换 http:\/\/xxx.xxx.xxx 形式的url
*** BUG TRACE

**** TODO 边境任务如果最后一轮是偷马任务，完成偷马后任务追踪里头偷马任务不消失。（偶尔）

** Schedule For Career

*** 2017/1
**** DONE <2017-01-03 周二> [50%]
	 CLOSED: [2017-01-09 周一 10:13]
	 - State "DONE"       from "TODO"       [2017-01-09 周一 10:13]
***** DONE 在我的外网vps下安装redmine
	  CLOSED: [2017-01-05 周四 14:53]
	  - State "DONE"       from "TODO"       [2017-01-05 周四 14:53]
**** TODO <2017-01-09 周一> [%]
***** TODO 游戏数据持久化及缓存设计
**** TODO 一致性啥希
**** TODO Lua源码分析
**** PROCESSING nginx源码解析 [50%]
	 - State "PROCESSING" from "TODO"       [2016-11-22 周二 21:40]
***** DONE nginx核心框架
	  CLOSED: [2016-12-05 周一 09:38]
	  - State "DONE"       from "TODO"       [2016-12-05 周一 09:38]

nginx采用分层模块化设计来组织所有部件，在运行configure脚本后，会在objs目录下生成一个文件ngx_modules.c。
该文件下的全局变量ngx_modules即记录了nginx运行时的所有模块：

#+begin_src c++
ngx_module_t *ngx_modules[] = {
    &ngx_core_module,
    &ngx_errlog_module,
    &ngx_conf_module,
    &ngx_regex_module,
    &ngx_events_module,
    &ngx_event_core_module,
    &ngx_epoll_module,
    &ngx_http_module,
    &ngx_http_core_module,
    &ngx_http_log_module,
    &ngx_http_upstream_module,
    &ngx_http_static_module,
    &ngx_http_autoindex_module,
    &ngx_http_index_module,
    &ngx_http_auth_basic_module,
    &ngx_http_access_module,
    &ngx_http_limit_conn_module,
    &ngx_http_limit_req_module,
    &ngx_http_geo_module,
    &ngx_http_map_module,
    &ngx_http_split_clients_module,
    &ngx_http_referer_module,
    &ngx_http_rewrite_module,
    &ngx_http_proxy_module,
    &ngx_http_fastcgi_module,
    &ngx_http_uwsgi_module,
    &ngx_http_scgi_module,
    &ngx_http_memcached_module,
    &ngx_http_empty_gif_module,
    &ngx_http_browser_module,
    &ngx_http_upstream_hash_module,
    &ngx_http_upstream_ip_hash_module,
    &ngx_http_upstream_least_conn_module,
    &ngx_http_upstream_keepalive_module,
    &ngx_http_upstream_zone_module,
    &ngx_http_write_filter_module,
    &ngx_http_header_filter_module,
    &ngx_http_chunked_filter_module,
    &ngx_http_range_header_filter_module,
    &ngx_http_gzip_filter_module,
    &ngx_http_postpone_filter_module,
    &ngx_http_ssi_filter_module,
    &ngx_http_charset_filter_module,
    &ngx_http_userid_filter_module,
    &ngx_http_headers_filter_module,
    &ngx_http_copy_filter_module,
    &ngx_http_range_body_filter_module,
    &ngx_http_not_modified_filter_module,
    NULL
};
#+end_src

ngx_modules是一个一维数组，它是如何来体现分层设计的呢？
我们来看下ngx_module_t的定义：

#+begin_src c++
struct ngx_module_s {
    ngx_uint_t            ctx_index;
    ngx_uint_t            index;

    char                 *name;

    ngx_uint_t            spare0;
    ngx_uint_t            spare1;

    ngx_uint_t            version;
    const char           *signature;

    void                 *ctx;
    ngx_command_t        *commands;
    ngx_uint_t            type;

    ngx_int_t           (*init_master)(ngx_log_t *log);

    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);

    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
    void                (*exit_thread)(ngx_cycle_t *cycle);
    void                (*exit_process)(ngx_cycle_t *cycle);

    void                (*exit_master)(ngx_cycle_t *cycle);

    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_t             spare_hook5;
    uintptr_t             spare_hook6;
    uintptr_t             spare_hook7;
};
typedef struct ngx_module_s      ngx_module_t;
#+end_src

ngx_module_t有一个type成员记录模块的类型，nginx预定义了如下几种类型：

#+begin_src c++
#define NGX_CORE_MODULE      0x45524F43  /* "CORE" */
#define NGX_CONF_MODULE      0x464E4F43  /* "CONF" */
#define NGX_EVENT_MODULE     0x544E5645  /* "EVNT" */
#define NGX_HTTP_MODULE      0x50545448  /* "HTTP" */
#define NGX_MAIL_MODULE      0x4C49414D  /* "MAIL" */
#+end_src

其中 NGX_CORE_MODULE 类型的模块为顶层模块，其他为二级模块。
顶层模块一般干两种事情：

  1. 负责核心事务
  2. 负责接入二级模块

***** TODO nginx事件模块
**** TODO [[http://linux.vbird.org/linux_basic/#part2][第二部分 Linux 文件、目录与磁盘格式]]
	 * [ ] Linux文件权限与目录配置
	 * [ ] Linux文件与目录管理
	 * [ ] Linux 磁盘与文件系统管理
	 * [ ] 文件的压缩与打包
**** TODO [[http://linux.vbird.org/linux_basic/#part3][第三部分：学习 Shell 与 Shell scripts]]
	 * [ ] vim程序编辑器
	 * [ ] 认识与学习 BASH
	 * [ ] 正规表示法与文件格式化处理
	 * [ ] 学习 shell scripts

**** TODO [[http://linux.vbird.org/linux_basic/#part4][第四部分：Linux 使用者管理]]
	 * [ ] Linux 账号管理与 ACL 权限控制
	 * [ ] 磁盘配额(Quota)与进阶文件系统管理
	 * [ ] 例行性工作排程 (crontab)
	 * [ ] 程序管理与 SELinux 初探

**** TODO [[http://linux.vbird.org/linux_basic/#part5][第五部分：Linux 系统管理员]]
	 * [ ] 认识系统服务(daemon)
	 * [ ] 认识与分析登录档
	 * [ ] 启动流程、模块管理与 loader
	 * [ ] 系统配置工具(网络与打印机)与硬件侦测
	 * [ ] 软件安装：原始码与 Tarball
	 * [ ] 软件安装：RPM, SRPM 与 YUM 功能
	 * [ ] X Window 配置介绍
	 * [ ] Linux 备份策略
	 * [ ] 核心编译

**** TODO [[http://linux.vbird.org/linux_server/#part1][第一部份：架站前的进修专区]]
**** TODO [[http://linux.vbird.org/linux_server/#part2][第二部分：主机的简易防火措施]]
**** TODO [[http://linux.vbird.org/linux_server/#part3][第三部分：局域网络内常见的服务器架设]]
**** TODO [[http://linux.vbird.org/linux_server/#part4][第四部分：常见因特网服务器架设]]
** Professional Skills

*** Lua

*** Nginx

*** Game Development

**** AI

** Summary

*** Be Skilled In

	* 擅长基于Unix平台的应用开发
	* 了解TCP/IP协议模型，及其工作原理
	* 熟悉中心拓扑结构的MMOG服务器架构

*** Work Exp

**** OG

***** 服务器架构

***** 技能

	  用状态模式来管理技能的释放流程。比如，我们可以抽象这么几种状态：正常状态、
	  蓄气状态、瞬发攻击状态、引导攻击状态。正常状态可以迁移到蓄气和两个攻击状
	  态；进入蓄气状态表示玩家释放蓄气技能，蓄气成功的话进入瞬发攻击状态；瞬发
	  攻击状态最常用，玩家大部分技能释放时都是进入该状态，对于非移动施法技能该
	  状态必须否决玩家的行走行为；引导攻击状态对应的玩家的读秒技能。

***** AI

****** 我们的解决方案

	   我们用事件/条件/行为规则来模拟怪物的一类条件发射，我们再将这样的规则用一
	   条决策封装起来。怪物有一组决策数组，在有事件发生的时候，通过轮训这个决策
	   数组就能模拟简单的怪物智能了。比如我们可以给“惹事怪”编辑这样一条决策：
	   当有玩家进入我的视野时，直接攻击；可以给“和平怪”编辑决策：当有玩家打我
	   时，逃跑。

***** 玩法

***** 微端模式支持

	  微端模式实际就是将本地文件放置网络读取。我们独立出一个 I/O 接口，游戏逻辑
	  中的所有 I/O 操作都通过该接口完成。该 I/O 接口支持异步模式，大端模式下，
	  调用本地 I/O 方法；微端模式下，调用网络 I/O 方法。

	  另外需要实现一个微端长连接服务器来管理所有的微端玩家。微端服务器的主要功能
	  有：推送资源地址；通过分析微端玩家的下载行为智能推送下载列表。

* Notes

** GAE(Google App Engine)

** Apache

*** Apache的配置文件http.conf参数含义详解

**** 基本配置

	 #+begin_src sh
       ServerRoot "/mnt/software/apache2" #你的apache软件安装的位置。其它指定的目录如果没有指定绝对路径，则目录是相对于该目录。
       PidFile logs/httpd.pid #第一个httpd进程(所有其他进程的父进程)的进程号文件位置。
       Listen 80 #服务器监听的端口号。
       ServerName www.clusting.com:80 #主站点名称（网站的主机名）。
       ServerAdmin admin@clusting.com #管理员的邮件地址。
       DocumentRoot "/mnt/web/clusting" #主站点的网页存储位置。
	 #+end_src

	 目录访问控制配置

	 #+begin_src html
       <Directory "D:/xampp/cgi-bin">
         Options FollowSymLinks
         AllowOverride None
         Order allow,deny
         Allow from all
       </Directory>
	 #+end_src

	 在上面这段目录属性配置中，主要有下面的选项：

	 1. Options：配置在特定目录使用哪些特性，常用的值和基本含义如下：

	    1. ExecCGI: 在该目录下允许执行CGI脚本。
		2. FollowSymLinks: 在该目录下允许文件系统使用符号连接。
		3. Indexes: 当用户访问该目录时，如果用户找不到DirectoryIndex指定的主页文件(例如index.html),则返回该目录下的文件列表给用户。
		4. SymLinksIfOwnerMatch: 当使用符号连接时，只有当符号连接的文件拥有者与实际文件的拥有者相同时才可以访问。

	    其它可用值和含义请参阅：http://www.clusting.com/Apache/ApacheManual/mod/core.html#options

	 2. AllowOverride：允许存在于.htaccess文件中的指令类型(.htaccess文件名是可以改变的，其文件名由AccessFileName指令决定)：

	    1. None: 当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件（可以减小服务器开销）。
		2. All: 在.htaccess文件中可以使用所有的指令。

	    其他的可用值及含义(如：Options FileInfo AuthConfig Limit等)，请参看： http://www.clusting.com/Apache/ApacheManual/mod/core.html#AllowOverride

	 3. Order：控制在访问时Allow和Deny两个访问规则哪个优先：

		1. Allow：允许访问的主机列表(可用域名或子网，例如：Allow from 192.168.0.0/16)。
		2. Deny：拒绝访问的主机列表。

	    更详细的用法可参看：http://www.clusting.com/Apache/ApacheManual/mod/mod_access.html#order

	 #+begin_src sh
       DirectoryIndex index.html index.htm index.PHP #主页文件的设置（本例将主页文件设置为：index.html,index.htm和index.php）
	 #+end_src

**** 服务器的优化 (MPM: Multi-Processing Modules)

	 apache2主要的优势就是对多处理器的支持更好，在编译时同过使用–with-mpm选项来决定apache2的工作模式。如果知道当前的apache2使用什么工作机制，可以通过httpd -l命令列出apache的所有模块，就可以知道其工作方式：

	 * prefork：如果httpd -l列出prefork.c，则需要对下面的段进行配置：
	   1. StartServers 5 #启动apache时启动的httpd进程个数。
	   2. MinSpareServers 5 #服务器保持的最小空闲进程数。
	   3. MaxSpareServers 10 #服务器保持的最大空闲进程数。
	   4. MaxClients 150 #最大并发连接数。
	   5. MaxRequestsPerChild 1000 #每个子进程被请求服务多少次后被kill掉。0表示不限制，推荐设置为1000。
	   在该工作模式下，服务器启动后起动5个httpd进程(加父进程共6个，通过ps -ax|grep httpd命令可以看到)。当有用户连接时，apache会使用一个空闲进程为该连接服务，同时父进程会fork一个子进程。直到内存中的空闲进程达到 MaxSpareServers。该模式是为了兼容一些旧版本的程序。我缺省编译时的选项。

	 * worker：如果httpd -l列出worker.c，则需要对下面的段进行配置：
	   1. StartServers 2 #启动apache时启动的httpd进程个数。
	   2. MaxClients 150 #最大并发连接数。
	   3. MinSpareThreads 25 #服务器保持的最小空闲线程数。
	   4. MaxSpareThreads 75 #服务器保持的最大空闲线程数。
	   5. ThreadsPerChild 25 #每个子进程的产生的线程数。
	   6. MaxRequestsPerChild 0 #每个子进程被请求服务多少次后被kill掉。0表示不限制，推荐设置为1000。
	   该模式是由线程来监听客户的连接。当有新客户连接时，由其中的一个空闲线程接受连接。服务器在启动时启动两个进程，每个进程产生的线程数是固定的 (ThreadsPerChild决定)，因此启动时有50个线程。当50个线程不够用时，服务器自动fork一个进程，再产生25个线程。

	 * perchild：如果httpd -l列出perchild.c，则需要对下面的段进行配置：
	   1. NumServers 5 #服务器启动时启动的子进程数
	   2. StartThreads 5 #每个子进程启动时启动的线程数
	   3. MinSpareThreads 5 #内存中的最小空闲线程数
	   4. MaxSpareThreads 10 #最大空闲线程数
	   5. MaxThreadsPerChild 2000 #每个线程最多被请求多少次后退出。0不受限制。
	   6. MaxRequestsPerChild 10000 #每个子进程服务多少次后被重新fork。0表示不受限制。
	   该模式下，子进程的数量是固定的，线程数不受限制。当客户端连接到服务器时，又空闲的线程提供服务。 如果空闲线程数不够，子进程自动产生线程来为新的连接服务。该模式用于多站点服务器。
**** HTTP返回头信息配置
	 * ServerTokens Prod #该参数设置http头部返回的apache版本信息，可用的值和含义如下：
	   1. Prod：仅软件名称，例如：apache
	   2. Major：包括主版本号，例如：apache/2
	   3. Minor：包括次版本号，例如：apache/2.0
	   4. Min：仅apache的完整版本号，例如：apache/2.0.54
	   5. OS：包括操作系统类型，例如：apache/2.0.54（Unix）
	   6. Full：包括apache支持的模块及模块版本号，例如：Apache/2.0.54 (Unix) mod_ssl/2.0.54 OpenSSL/0.9.7g
	 * ServerSignature Off #在页面产生错误时是否出现服务器版本信息。推荐设置为Off
**** 持久性连接设置
	 * KeepAlive On #开启持久性连接功能。即当客户端连接到服务器，下载完数据后仍然保持连接状态。
	 * MaxKeepAliveRequests 100 #一个连接服务的最多请求次数。
	 * KeepAliveTimeout 30 #持续连接多长时间，该连接没有再请求数据，则断开该连接。缺省为15秒。
**** 别名设置
	 对于不在DocumentRoot指定的目录内的页面，既可以使用符号连接，也可以使用别名。别名的设置如下：
	 #+begin_src html
       Alias /download/ "/var/www/download/" #访问时可以输入:http://www.custing.com/download/
       #对该目录进行访问控制设置
       Options Indexes MultiViews
       AllowOverride AuthConfig
       Order allow,deny
       Allow from all
	 #+end_src
**** CGI设置
	 #+begin_src html
       scrīptAlias /cgi-bin/ "/mnt/software/apache2/cgi-bin/" # 访问时可以：http://www.clusting.com/cgi-bin/ 。但是该目录下的CGI脚本文件要加可执行权限！

       #设置目录属性
       AllowOverride None
       Options None
       Order allow,deny
       Allow from all
	 #+end_src
**** 日志的设置
	 * 错误日志的设置
	   #+begin_src sh
         ErrorLog logs/error_log #日志的保存位置
         LogLevel warn #日志的级别
	   #+end_src
	   显示的格式如下
	   #+begin_src html
         [Mon Oct 10 15:54:29 2005] [error] [client 192.168.10.22] access to /download/ failed, reason: user admin not allowed access
	   #+end_src
	 * 日志格式设置
	   日志的缺省格式有如下几种：
	   #+begin_src html
         LogFormat "%h %l %u %t "%r" %>s %b "%{Referer}i" "%{User-Agent}i"" combined
         LogFormat "%h %l %u %t "%r" %>s %b" common #common为日志格式名称
         LogFormat "%{Referer}i -> %U" referer
         LogFormat "%{User-agent}i" agent
         CustomLog logs/access_log common
	   #+end_src
	   格式中的各个参数如下：
	   #+begin_src html
         %h –客户端的ip地址或主机名
         %l –The 这是由客户端 identd 判断的RFC 1413身份，输出中的符号 "-" 表示此处信息无效。
         %u –由HTTP认证系统得到的访问该网页的客户名。有认证时才有效，输出中的符号 "-" 表示此处信息无效。
         %t –服务器完成对请求的处理时的时间。
         "%r" –引号中是客户发出的包含了许多有用信息的请求内容。
         %>s –这个是服务器返回给客户端的状态码。
         %b –最后这项是返回给客户端的不包括响应头的字节数。
         "%{Referer}i" –此项指明了该请求是从被哪个网页提交过来的。
         "%{User-Agent}i" –此项是客户浏览器提供的浏览器识别信息。
	   #+end_src
	   下面是一段访问日志的实例：
	   #+begin_src html
         192.168.10.22 – bearzhang [10/Oct/2005:16:53:06 +0800] "GET /download/ HTTP/1.1" 200 1228
         192.168.10.22 – - [10/Oct/2005:16:53:06 +0800] "GET /icons/blank.gif HTTP/1.1" 304 -
         192.168.10.22 – - [10/Oct/2005:16:53:06 +0800] "GET /icons/back.gif HTTP/1.1" 304 -
	   #+end_src
**** 虚拟主机的配置
	 * 基于IP地址的虚拟主机配置
	   #+begin_src html
         Listen 80

         DocumentRoot /www/example1
         ServerName www.example1.com

         DocumentRoot /www/example2
         ServerName www.example2.org
	   #+end_src
	 * 基于IP和多端口的虚拟主机配置
	   #+begin_src html
         Listen 172.20.30.40:80
         Listen 172.20.30.40:8080
         Listen 172.20.30.50:80
         Listen 172.20.30.50:8080

         DocumentRoot /www/example1-80
         ServerName www.example1.com

         DocumentRoot /www/example1-8080
         ServerName www.example1.com

         DocumentRoot /www/example2-80
         ServerName www.example1.org

         DocumentRoot /www/example2-8080
         ServerName www.example2.org
	   #+end_src
	 * 单个IP地址的服务器上基于域名的虚拟主机配置
	   #+begin_src html
         # Ensure that Apache listens on port 80
         Listen 80

         # Listen for virtual host requests on all IP addresses
         NameVirtualHost *:80

         DocumentRoot /www/example1
         ServerName www.example1.com
         ServerAlias example1.com. *.example1.com
         # Other directives here

         DocumentRoot /www/example2
         ServerName www.example2.org
         # Other directives here
	   #+end_src
	 * 在多个IP地址的服务器上配置基于域名的虚拟主机：
	   #+begin_src html
         Listen 80

         # This is the "main" server running on 172.20.30.40
         ServerName server.domain.com
         DocumentRoot /www/mainserver

         # This is the other address
         NameVirtualHost 172.20.30.50

         DocumentRoot /www/example1
         ServerName www.example1.com
         # Other directives here …

         DocumentRoot /www/example2
         ServerName www.example2.org
         # Other directives here …
	   #+end_src
	 * 在不同的端口上运行不同的站点(基于多端口的服务器上配置基于域名的虚拟主机)
	   #+begin_src html
         Listen 80
         Listen 8080

         NameVirtualHost 172.20.30.40:80
         NameVirtualHost 172.20.30.40:8080

         ServerName www.example1.com
         DocumentRoot /www/domain-80

         ServerName www.example1.com
         DocumentRoot /www/domain-8080

         ServerName www.example2.org
         DocumentRoot /www/otherdomain-80

         ServerName www.example2.org
         DocumentRoot /www/otherdomain-8080
	   #+end_src
	 * 基于域名和基于IP的混合虚拟主机的配置
	   #+begin_src html
         Listen 80

         NameVirtualHost 172.20.30.40

         DocumentRoot /www/example1
         ServerName www.example1.com

         DocumentRoot /www/example2
         ServerName www.example2.org

         DocumentRoot /www/example3
         ServerName www.example3.net
	   #+end_src
** Git																	:git:
*** Git分支
**** 分支查看
	 * 查看本地分支
	   #+BEGIN_SRC sh
         $ git branch
         * master
	   #+END_SRC
	 * 查看远程分支
	   #+BEGIN_SRC sh
         $ git branch -r
           kbengine/master
           origin/HEAD -> origin/master
           origin/master
	   #+END_SRC
	 * 查看所有分支
	   #+BEGIN_SRC sh
         $ git branch -a
         * master
           remotes/kbengine/master
           remotes/origin/HEAD -> origin/master
           remotes/origin/master
	   #+END_SRC
	 * 创建分支
	   #+BEGIN_SRC sh
         $ git branch <分支名>
	   #+END_SRC
	 * 删除本地分支
	   #+BEGIN_SRC sh
         $ git branch -d <分支名>
	   #+END_SRC
	 * 切换分支
	   #+BEGIN_SRC sh
         git checkout <分支名>
	   #+END_SRC
**** 分支合并
** Tools
*** VMware 虚拟机启动脚本
	#+begin_src sh
      start /min vmware.exe -x "F:\Virtual Machine\CentOS\CentOS.vmx"
      ping -n 10 127.0.0.1 >nul 2>nul
      taskkill /im vmware.exe /f
      exit
	#+end_src
* Articles
** MMOG
   * [[https://developer.valvesoftware.com/wiki/Main_Page][Source Engine]]

	 1. [ ] [[https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization][网络延时补偿]]
	 2. [ ] [[https://developer.valvesoftware.com/wiki/Lag_compensation][Lag compensation]]
	 3. [ ] [[https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking][Source Multiplayer Networking]]
