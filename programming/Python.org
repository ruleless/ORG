* Python 语法
** 数据类型
*** 基本数据类型

   	Python 有两类基本数据类型：数值型和字符串型。数值型又分为：整数、浮点数和复数。
	由 Python 的基本数据类型声明或实例化的对象都是不可变的，
	不可变意味着一旦给对象分配了内存区域，那这一块内存区域在这个对象的生存周期内是不会更改的。

*** 字符串

	Python 的字符串形似: 'string', "string", """string"""，除了最后一个可以用于定义多行字串之外，它们都是等价的。

	Python 的字符串格式化可直接通过一段字符串后接%符号完成。例如："Python Version is %.1f"%2.7。

** 内嵌数据结构(序列)
*** 元组(tuple)

	Python 的元组形似：(1, 2, 3)。在三种 Python 内嵌序列中只有元组是不可变对象。

*** 列表(list)

	Python 的列表形似：[1, 2, 3]。列表是可变对象，分配给列表对象的内存区域是可以更改的。
	对于可变对象我们需要特别注意一点：*引用可变对象的变量a赋给另外一个变量b时，
	a和b引用的是同一个可变对象*，这意味着任何对a的更改都会反应到b上。

*** 字典(dict)

	Python 的字典形似：{1:"one", 2:"two", 3:"three"}。字典也是可变对象。字典的键值只能是不可变对象。

*** 序列

	Python 的元组、列表和字典都属于序列。序列的最主要的两个特点是：支持索引和切片操作符。
	索引操作形如：a[1]，切片操作形如：a[0:-1]。注意：切片操作是会拷贝对象的。

	另外，使用 dir() 函数观察这三个内嵌序列，我们发现它们都有一个 __iter__ 方法，__iter__ 方法返回一个迭代器，
	用于我们的循环遍历操作。迭代器需要实现 next() 方法。为了搞清楚迭代器的工作原理，我们给出两段等价的代码。

	#+begin_src python
      for i in seq:
          do_something_to(i)
	#+end_src

	等价于

	#+begin_src python
      fetch = iter(seq) # 相当于调用 seq.__iter__()
      while True:
          try:
              i = fetch.next()
          except StopIteration:
              break
          do_something_to(i)
	#+end_src

** 常量和变量

   在 Python 脚本中出现的类似 1, "one", 1.0 之类符号都属于 Python 常量，
   Python 常量是不可变对象，因为它们属于基本数据类型。

   Python 中的变量是无类型的，这表示 Python 中的变量可以指代任何类型的一个值对象[fn:1]。
   在有类型编程语言中，没有值对象的概念，比如我们定义： std::string a = std::string("abc");
   那么，std::string("abc") 就是存储在变量 a 的地址中，我们能够通过 &a 取得 a 的地址，
   在这里，变量不仅是符号而且还绑定了它所表达的值；而在无类型编程语言中，变量仅仅作为标识符，
   它与它所表达的值对象只有引用关系，而通过重新赋值可以很容易地取消这种引用关系。

** 运算符和表达式

   Python 运算符汇总
   |------------+----------|
   | 算数运算符 | 名称     |
   |------------+----------|
   | +          | 加       |
   | -          | 减       |
   | *          | 乘       |
   | /          | 除       |
   | **         | 幂       |
   | %          | 取模     |
   |------------+----------|
   | 位运算符   | 名称     |
   |------------+----------|
   | <<         | 左移     |
   | >>         | 右移     |
   | &          | 按位与   |
   | 竖杠       | 按位或   |
   | ~          | 按位翻转 |
   | ^          | 按位异或 |
   |------------+----------|
   | 关系运算符 | 名称     |
   |------------+----------|
   | <          | 小于     |
   | >          | 大于     |
   | <=         | 小于等于 |
   | >=         | 大于等于 |
   | !=         | 不等于   |
   |------------+----------|
   | 逻辑运算符 | 名称     |
   |------------+----------|
   | not        | 逻辑非   |
   | and        | 逻辑与   |
   | or         | 逻辑或   |
   |------------+----------|

** 控制流
*** 条件分支控制

	使用条件分支的程序片段类似：

	#+begin_src python
      if cond1:
          statement1
      elif cond2:
          statement2
      else:
          statement3
	#+end_src

	Python 没有 switch 语句，当需要处理大量条件转移情况的时候，建议用 dict 来实现。

*** 循环控制

	有两种类型的的循环控制语句，代码片段分别类似：

	#+begin_src python
      while (cond):
          statement
	#+end_src

	和

	#+begin_src python
      for i in seq:
          statement
	#+end_src

** 函数

   Python 中函数的定义形如：
   #+begin_src python
     def foo(a):
         statement(a)
   #+end_src

   带默认参数的函数定义：
   #+begin_src python
     def foo(a, b = 1):
         statement
   #+end_src

   除了 C++ 中的函数调用方式外，Python 还支持通过关键参数的方式来调用函数，如：
   #+begin_src python
     foo(a = 1)
     foo(a = 1, b = 2)
     foo(b = 2, a = 1)
   #+end_src

   带可变参数的函数定义：
   #+begin_src python
     def foo(a, *b):
         statement(b)
   #+end_src

   在调用该函数时，Python 会自动将实参 a 后面的参数打包成一个元组传递给形参 b。
** 面向对象编程
*** 类定义

	Python 中的类定义形如：
	#+begin_src python
      class A:
          mMember = [1, 2, 3]

          def __init__(self):
              pass

          def foo(self):
              print(self.mMember)
              print(A.mMember)
	#+end_src
	Python 类中的成员全部都是公共的，Python 没有强制隐藏对象细节的机制，若需要这样做，我们只能通过约定代码规范来实现。

* Footnotes

[fn:1] 本来我可以用对象来表达这个概念，但为了与代数中的变量与值的概念对应起来，特用值对象来表达
